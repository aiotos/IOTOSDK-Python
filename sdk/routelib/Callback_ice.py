# -*- coding: utf-8 -*-
# **********************************************************************
#
# Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.6.3
#
# <auto-generated>
#
# Generated from file `Callback.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy
import Glacier2_Session_ice

# Included module Ice
_M_Ice = Ice.openModule('Ice')

# Included module Glacier2
_M_Glacier2 = Ice.openModule('Glacier2')

# Start of module IotRoute
_M_IotRoute = Ice.openModule('IotRoute')
__name__ = 'IotRoute'

if 'CallResCode' not in _M_IotRoute.__dict__:
    _M_IotRoute.CallResCode = Ice.createTempClass()
    class CallResCode(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    CallResCode.Sucess = CallResCode("Sucess", 0)
    CallResCode.Unknown = CallResCode("Unknown", 1)
    CallResCode.SelfOffline = CallResCode("SelfOffline", 2)
    CallResCode.ObjectOffline = CallResCode("ObjectOffline", 3)
    CallResCode.NetError = CallResCode("NetError", 4)
    CallResCode.ArgError = CallResCode("ArgError", 5)
    CallResCode.NoWebSer = CallResCode("NoWebSer", 6)
    CallResCode.AccountNotRegister = CallResCode("AccountNotRegister", 7)
    CallResCode._enumerators = { 0:CallResCode.Sucess, 1:CallResCode.Unknown, 2:CallResCode.SelfOffline, 3:CallResCode.ObjectOffline, 4:CallResCode.NetError, 5:CallResCode.ArgError, 6:CallResCode.NoWebSer, 7:CallResCode.AccountNotRegister }

    _M_IotRoute._t_CallResCode = IcePy.defineEnum('::IotRoute::CallResCode', CallResCode, (), CallResCode._enumerators)

    _M_IotRoute.CallResCode = CallResCode
    #del CallResCode

if 'CallbackReceiver' not in _M_IotRoute.__dict__:
    _M_IotRoute.CallbackReceiver = Ice.createTempClass()
    class CallbackReceiver(Ice.Object):
        def __init__(self):
            if Ice.getType(self) == _M_IotRoute.CallbackReceiver:
                raise RuntimeError('IotRoute.CallbackReceiver is an abstract class')

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::IotRoute::CallbackReceiver')

        def ice_id(self, current=None):
            return '::IotRoute::CallbackReceiver'

        def ice_staticId():
            return '::IotRoute::CallbackReceiver'
        ice_staticId = staticmethod(ice_staticId)

        def callback(self, fromUuid, data, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_IotRoute._t_CallbackReceiver)

        __repr__ = __str__

    _M_IotRoute.CallbackReceiverPrx = Ice.createTempClass()
    class CallbackReceiverPrx(Ice.ObjectPrx):

        def callback(self, fromUuid, data, _ctx=None):
            return _M_IotRoute.CallbackReceiver._op_callback.invoke(self, ((fromUuid, data), _ctx))

        def begin_callback(self, fromUuid, data, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_IotRoute.CallbackReceiver._op_callback.begin(self, ((fromUuid, data), _response, _ex, _sent, _ctx))

        def end_callback(self, _r):
            return _M_IotRoute.CallbackReceiver._op_callback.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_IotRoute.CallbackReceiverPrx.ice_checkedCast(proxy, '::IotRoute::CallbackReceiver', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_IotRoute.CallbackReceiverPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::IotRoute::CallbackReceiver'
        ice_staticId = staticmethod(ice_staticId)

    _M_IotRoute._t_CallbackReceiverPrx = IcePy.defineProxy('::IotRoute::CallbackReceiver', CallbackReceiverPrx)

    _M_IotRoute._t_CallbackReceiver = IcePy.defineClass('::IotRoute::CallbackReceiver', CallbackReceiver, -1, (), True, False, None, (), ())
    CallbackReceiver._ice_type = _M_IotRoute._t_CallbackReceiver

    CallbackReceiver._op_callback = IcePy.Operation('callback', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), ((), IcePy._t_string, False, 0), ())

    _M_IotRoute.CallbackReceiver = CallbackReceiver
    #del CallbackReceiver

    _M_IotRoute.CallbackReceiverPrx = CallbackReceiverPrx
    #del CallbackReceiverPrx

if 'DataSerReceiver' not in _M_IotRoute.__dict__:
    _M_IotRoute.DataSerReceiver = Ice.createTempClass()
    class DataSerReceiver(Ice.Object):
        def __init__(self):
            if Ice.getType(self) == _M_IotRoute.DataSerReceiver:
                raise RuntimeError('IotRoute.DataSerReceiver is an abstract class')

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::IotRoute::DataSerReceiver')

        def ice_id(self, current=None):
            return '::IotRoute::DataSerReceiver'

        def ice_staticId():
            return '::IotRoute::DataSerReceiver'
        ice_staticId = staticmethod(ice_staticId)

        def onLogin(self, userName, psw, uuid, current=None):
            pass

        def onLogout(self, uuidSession, current=None):
            pass

        def onGetTableDetail(self, uuidSession, current=None):
            pass

        def onDeleteTable(self, uuidSession, current=None):
            pass

        def onUpdateTable(self, uuidSession, tableJsonData, current=None):
            pass

        def onClientOnline(self, uuidSession, current=None):
            pass

        def onClientOffline(self, uuid, current=None):
            pass

        def onDevOnline(self, uuidSession, devId, current=None):
            pass

        def onDevOffline(self, uuidSession, devId, current=None):
            pass

        def onRouteGetTbDetail(self, uuid, current=None):
            pass

        def onGetData(self, uuidSession, data, toDevice, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_IotRoute._t_DataSerReceiver)

        __repr__ = __str__

    _M_IotRoute.DataSerReceiverPrx = Ice.createTempClass()
    class DataSerReceiverPrx(Ice.ObjectPrx):

        def onLogin(self, userName, psw, uuid, _ctx=None):
            return _M_IotRoute.DataSerReceiver._op_onLogin.invoke(self, ((userName, psw, uuid), _ctx))

        def begin_onLogin(self, userName, psw, uuid, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_IotRoute.DataSerReceiver._op_onLogin.begin(self, ((userName, psw, uuid), _response, _ex, _sent, _ctx))

        def end_onLogin(self, _r):
            return _M_IotRoute.DataSerReceiver._op_onLogin.end(self, _r)

        def onLogout(self, uuidSession, _ctx=None):
            return _M_IotRoute.DataSerReceiver._op_onLogout.invoke(self, ((uuidSession, ), _ctx))

        def begin_onLogout(self, uuidSession, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_IotRoute.DataSerReceiver._op_onLogout.begin(self, ((uuidSession, ), _response, _ex, _sent, _ctx))

        def end_onLogout(self, _r):
            return _M_IotRoute.DataSerReceiver._op_onLogout.end(self, _r)

        def onGetTableDetail(self, uuidSession, _ctx=None):
            return _M_IotRoute.DataSerReceiver._op_onGetTableDetail.invoke(self, ((uuidSession, ), _ctx))

        def begin_onGetTableDetail(self, uuidSession, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_IotRoute.DataSerReceiver._op_onGetTableDetail.begin(self, ((uuidSession, ), _response, _ex, _sent, _ctx))

        def end_onGetTableDetail(self, _r):
            return _M_IotRoute.DataSerReceiver._op_onGetTableDetail.end(self, _r)

        def onDeleteTable(self, uuidSession, _ctx=None):
            return _M_IotRoute.DataSerReceiver._op_onDeleteTable.invoke(self, ((uuidSession, ), _ctx))

        def begin_onDeleteTable(self, uuidSession, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_IotRoute.DataSerReceiver._op_onDeleteTable.begin(self, ((uuidSession, ), _response, _ex, _sent, _ctx))

        def end_onDeleteTable(self, _r):
            return _M_IotRoute.DataSerReceiver._op_onDeleteTable.end(self, _r)

        def onUpdateTable(self, uuidSession, tableJsonData, _ctx=None):
            return _M_IotRoute.DataSerReceiver._op_onUpdateTable.invoke(self, ((uuidSession, tableJsonData), _ctx))

        def begin_onUpdateTable(self, uuidSession, tableJsonData, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_IotRoute.DataSerReceiver._op_onUpdateTable.begin(self, ((uuidSession, tableJsonData), _response, _ex, _sent, _ctx))

        def end_onUpdateTable(self, _r):
            return _M_IotRoute.DataSerReceiver._op_onUpdateTable.end(self, _r)

        def onClientOnline(self, uuidSession, _ctx=None):
            return _M_IotRoute.DataSerReceiver._op_onClientOnline.invoke(self, ((uuidSession, ), _ctx))

        def begin_onClientOnline(self, uuidSession, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_IotRoute.DataSerReceiver._op_onClientOnline.begin(self, ((uuidSession, ), _response, _ex, _sent, _ctx))

        def end_onClientOnline(self, _r):
            return _M_IotRoute.DataSerReceiver._op_onClientOnline.end(self, _r)

        def onClientOffline(self, uuid, _ctx=None):
            return _M_IotRoute.DataSerReceiver._op_onClientOffline.invoke(self, ((uuid, ), _ctx))

        def begin_onClientOffline(self, uuid, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_IotRoute.DataSerReceiver._op_onClientOffline.begin(self, ((uuid, ), _response, _ex, _sent, _ctx))

        def end_onClientOffline(self, _r):
            return _M_IotRoute.DataSerReceiver._op_onClientOffline.end(self, _r)

        def onDevOnline(self, uuidSession, devId, _ctx=None):
            return _M_IotRoute.DataSerReceiver._op_onDevOnline.invoke(self, ((uuidSession, devId), _ctx))

        def begin_onDevOnline(self, uuidSession, devId, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_IotRoute.DataSerReceiver._op_onDevOnline.begin(self, ((uuidSession, devId), _response, _ex, _sent, _ctx))

        def end_onDevOnline(self, _r):
            return _M_IotRoute.DataSerReceiver._op_onDevOnline.end(self, _r)

        def onDevOffline(self, uuidSession, devId, _ctx=None):
            return _M_IotRoute.DataSerReceiver._op_onDevOffline.invoke(self, ((uuidSession, devId), _ctx))

        def begin_onDevOffline(self, uuidSession, devId, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_IotRoute.DataSerReceiver._op_onDevOffline.begin(self, ((uuidSession, devId), _response, _ex, _sent, _ctx))

        def end_onDevOffline(self, _r):
            return _M_IotRoute.DataSerReceiver._op_onDevOffline.end(self, _r)

        def onRouteGetTbDetail(self, uuid, _ctx=None):
            return _M_IotRoute.DataSerReceiver._op_onRouteGetTbDetail.invoke(self, ((uuid, ), _ctx))

        def begin_onRouteGetTbDetail(self, uuid, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_IotRoute.DataSerReceiver._op_onRouteGetTbDetail.begin(self, ((uuid, ), _response, _ex, _sent, _ctx))

        def end_onRouteGetTbDetail(self, _r):
            return _M_IotRoute.DataSerReceiver._op_onRouteGetTbDetail.end(self, _r)

        def onGetData(self, uuidSession, data, toDevice, _ctx=None):
            return _M_IotRoute.DataSerReceiver._op_onGetData.invoke(self, ((uuidSession, data, toDevice), _ctx))

        def begin_onGetData(self, uuidSession, data, toDevice, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_IotRoute.DataSerReceiver._op_onGetData.begin(self, ((uuidSession, data, toDevice), _response, _ex, _sent, _ctx))

        def end_onGetData(self, _r):
            return _M_IotRoute.DataSerReceiver._op_onGetData.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_IotRoute.DataSerReceiverPrx.ice_checkedCast(proxy, '::IotRoute::DataSerReceiver', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_IotRoute.DataSerReceiverPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::IotRoute::DataSerReceiver'
        ice_staticId = staticmethod(ice_staticId)

    _M_IotRoute._t_DataSerReceiverPrx = IcePy.defineProxy('::IotRoute::DataSerReceiver', DataSerReceiverPrx)

    _M_IotRoute._t_DataSerReceiver = IcePy.defineClass('::IotRoute::DataSerReceiver', DataSerReceiver, -1, (), True, False, None, (), ())
    DataSerReceiver._ice_type = _M_IotRoute._t_DataSerReceiver

    DataSerReceiver._op_onLogin = IcePy.Operation('onLogin', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), ((), IcePy._t_string, False, 0), ())
    DataSerReceiver._op_onLogout = IcePy.Operation('onLogout', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_string, False, 0), ())
    DataSerReceiver._op_onGetTableDetail = IcePy.Operation('onGetTableDetail', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_string, False, 0), ())
    DataSerReceiver._op_onDeleteTable = IcePy.Operation('onDeleteTable', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_string, False, 0), ())
    DataSerReceiver._op_onUpdateTable = IcePy.Operation('onUpdateTable', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), ((), IcePy._t_string, False, 0), ())
    DataSerReceiver._op_onClientOnline = IcePy.Operation('onClientOnline', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_string, False, 0), ())
    DataSerReceiver._op_onClientOffline = IcePy.Operation('onClientOffline', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_string, False, 0), ())
    DataSerReceiver._op_onDevOnline = IcePy.Operation('onDevOnline', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), ((), IcePy._t_string, False, 0), ())
    DataSerReceiver._op_onDevOffline = IcePy.Operation('onDevOffline', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), ((), IcePy._t_string, False, 0), ())
    DataSerReceiver._op_onRouteGetTbDetail = IcePy.Operation('onRouteGetTbDetail', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_string, False, 0), ())
    DataSerReceiver._op_onGetData = IcePy.Operation('onGetData', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_bool, False, 0)), (), ((), IcePy._t_string, False, 0), ())

    _M_IotRoute.DataSerReceiver = DataSerReceiver
    #del DataSerReceiver

    _M_IotRoute.DataSerReceiverPrx = DataSerReceiverPrx
    #del DataSerReceiverPrx

if 'CallbackForWebSer' not in _M_IotRoute.__dict__:
    _M_IotRoute.CallbackForWebSer = Ice.createTempClass()
    class CallbackForWebSer(Ice.Object):
        def __init__(self):
            if Ice.getType(self) == _M_IotRoute.CallbackForWebSer:
                raise RuntimeError('IotRoute.CallbackForWebSer is an abstract class')

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::IotRoute::CallbackForWebSer')

        def ice_id(self, current=None):
            return '::IotRoute::CallbackForWebSer'

        def ice_staticId():
            return '::IotRoute::CallbackForWebSer'
        ice_staticId = staticmethod(ice_staticId)

        def addClientEx(self, uuid, commonCallbackIdent, webSerCallbackIdent, current=None):
            pass

        def setData(self, uuid, points, current=None):
            pass

        def getData(self, uuid, points, current=None):
            pass

        def pubMsg(self, points, current=None):
            pass

        def pushUserSubRelation(self, uuidList, points, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_IotRoute._t_CallbackForWebSer)

        __repr__ = __str__

    _M_IotRoute.CallbackForWebSerPrx = Ice.createTempClass()
    class CallbackForWebSerPrx(Ice.ObjectPrx):

        def addClientEx(self, uuid, commonCallbackIdent, webSerCallbackIdent, _ctx=None):
            return _M_IotRoute.CallbackForWebSer._op_addClientEx.invoke(self, ((uuid, commonCallbackIdent, webSerCallbackIdent), _ctx))

        def begin_addClientEx(self, uuid, commonCallbackIdent, webSerCallbackIdent, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_IotRoute.CallbackForWebSer._op_addClientEx.begin(self, ((uuid, commonCallbackIdent, webSerCallbackIdent), _response, _ex, _sent, _ctx))

        def end_addClientEx(self, _r):
            return _M_IotRoute.CallbackForWebSer._op_addClientEx.end(self, _r)

        def setData(self, uuid, points, _ctx=None):
            return _M_IotRoute.CallbackForWebSer._op_setData.invoke(self, ((uuid, points), _ctx))

        def begin_setData(self, uuid, points, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_IotRoute.CallbackForWebSer._op_setData.begin(self, ((uuid, points), _response, _ex, _sent, _ctx))

        def end_setData(self, _r):
            return _M_IotRoute.CallbackForWebSer._op_setData.end(self, _r)

        def getData(self, uuid, points, _ctx=None):
            return _M_IotRoute.CallbackForWebSer._op_getData.invoke(self, ((uuid, points), _ctx))

        def begin_getData(self, uuid, points, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_IotRoute.CallbackForWebSer._op_getData.begin(self, ((uuid, points), _response, _ex, _sent, _ctx))

        def end_getData(self, _r):
            return _M_IotRoute.CallbackForWebSer._op_getData.end(self, _r)

        def pubMsg(self, points, _ctx=None):
            return _M_IotRoute.CallbackForWebSer._op_pubMsg.invoke(self, ((points, ), _ctx))

        def begin_pubMsg(self, points, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_IotRoute.CallbackForWebSer._op_pubMsg.begin(self, ((points, ), _response, _ex, _sent, _ctx))

        def end_pubMsg(self, _r):
            return _M_IotRoute.CallbackForWebSer._op_pubMsg.end(self, _r)

        def pushUserSubRelation(self, uuidList, points, _ctx=None):
            return _M_IotRoute.CallbackForWebSer._op_pushUserSubRelation.invoke(self, ((uuidList, points), _ctx))

        def begin_pushUserSubRelation(self, uuidList, points, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_IotRoute.CallbackForWebSer._op_pushUserSubRelation.begin(self, ((uuidList, points), _response, _ex, _sent, _ctx))

        def end_pushUserSubRelation(self, _r):
            return _M_IotRoute.CallbackForWebSer._op_pushUserSubRelation.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_IotRoute.CallbackForWebSerPrx.ice_checkedCast(proxy, '::IotRoute::CallbackForWebSer', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_IotRoute.CallbackForWebSerPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::IotRoute::CallbackForWebSer'
        ice_staticId = staticmethod(ice_staticId)

    _M_IotRoute._t_CallbackForWebSerPrx = IcePy.defineProxy('::IotRoute::CallbackForWebSer', CallbackForWebSerPrx)

    _M_IotRoute._t_CallbackForWebSer = IcePy.defineClass('::IotRoute::CallbackForWebSer', CallbackForWebSer, -1, (), True, False, None, (), ())
    CallbackForWebSer._ice_type = _M_IotRoute._t_CallbackForWebSer

    CallbackForWebSer._op_addClientEx = IcePy.Operation('addClientEx', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), _M_Ice._t_Identity, False, 0), ((), _M_Ice._t_Identity, False, 0)), (), ((), IcePy._t_string, False, 0), ())
    CallbackForWebSer._op_setData = IcePy.Operation('setData', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), ((), IcePy._t_string, False, 0), ())
    CallbackForWebSer._op_getData = IcePy.Operation('getData', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), ((), IcePy._t_string, False, 0), ())
    CallbackForWebSer._op_pubMsg = IcePy.Operation('pubMsg', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_string, False, 0), ())
    CallbackForWebSer._op_pushUserSubRelation = IcePy.Operation('pushUserSubRelation', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), ((), IcePy._t_string, False, 0), ())

    _M_IotRoute.CallbackForWebSer = CallbackForWebSer
    #del CallbackForWebSer

    _M_IotRoute.CallbackForWebSerPrx = CallbackForWebSerPrx
    #del CallbackForWebSerPrx

if 'Callback' not in _M_IotRoute.__dict__:
    _M_IotRoute.Callback = Ice.createTempClass()
    class Callback(Ice.Object):
        def __init__(self):
            if Ice.getType(self) == _M_IotRoute.Callback:
                raise RuntimeError('IotRoute.Callback is an abstract class')

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::IotRoute::Callback')

        def ice_id(self, current=None):
            return '::IotRoute::Callback'

        def ice_staticId():
            return '::IotRoute::Callback'
        ice_staticId = staticmethod(ice_staticId)

        def sendMsg(self, fromUuidSession, toUuidSession, data, current=None):
            pass

        def addClient(self, uuidSession, callbackIdent, current=None):
            pass

        def subMsg(self, uuidSession, points, current=None):
            pass

        def syncPubMsg(self, uuidSession, points, current=None):
            pass

        def alarm(self, uuidSession, points, current=None):
            pass

        def login(self, userName, psw, uuid, current=None):
            pass

        def logout(self, uuidSession, current=None):
            pass

        def getTableDetail(self, uuidSession, current=None):
            pass

        def deleteTable(self, uuidSession, current=None):
            pass

        def updateTable(self, uuidSession, tableJsonData, current=None):
            pass

        def getDeviceData(self, uuidSession, points, current=None):
            pass

        def getPlatformData(self, uuidSession, points, current=None):
            pass

        def devOnline(self, uuidSession, devId, current=None):
            pass

        def devOffline(self, uuidSession, devId, current=None):
            pass

        def heartbeat(self, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_IotRoute._t_Callback)

        __repr__ = __str__

    _M_IotRoute.CallbackPrx = Ice.createTempClass()
    class CallbackPrx(Ice.ObjectPrx):

        def sendMsg(self, fromUuidSession, toUuidSession, data, _ctx=None):
            return _M_IotRoute.Callback._op_sendMsg.invoke(self, ((fromUuidSession, toUuidSession, data), _ctx))

        def begin_sendMsg(self, fromUuidSession, toUuidSession, data, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_IotRoute.Callback._op_sendMsg.begin(self, ((fromUuidSession, toUuidSession, data), _response, _ex, _sent, _ctx))

        def end_sendMsg(self, _r):
            return _M_IotRoute.Callback._op_sendMsg.end(self, _r)

        def addClient(self, uuidSession, callbackIdent, _ctx=None):
            return _M_IotRoute.Callback._op_addClient.invoke(self, ((uuidSession, callbackIdent), _ctx))

        def begin_addClient(self, uuidSession, callbackIdent, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_IotRoute.Callback._op_addClient.begin(self, ((uuidSession, callbackIdent), _response, _ex, _sent, _ctx))

        def end_addClient(self, _r):
            return _M_IotRoute.Callback._op_addClient.end(self, _r)

        def subMsg(self, uuidSession, points, _ctx=None):
            return _M_IotRoute.Callback._op_subMsg.invoke(self, ((uuidSession, points), _ctx))

        def begin_subMsg(self, uuidSession, points, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_IotRoute.Callback._op_subMsg.begin(self, ((uuidSession, points), _response, _ex, _sent, _ctx))

        def end_subMsg(self, _r):
            return _M_IotRoute.Callback._op_subMsg.end(self, _r)

        def syncPubMsg(self, uuidSession, points, _ctx=None):
            return _M_IotRoute.Callback._op_syncPubMsg.invoke(self, ((uuidSession, points), _ctx))

        def begin_syncPubMsg(self, uuidSession, points, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_IotRoute.Callback._op_syncPubMsg.begin(self, ((uuidSession, points), _response, _ex, _sent, _ctx))

        def end_syncPubMsg(self, _r):
            return _M_IotRoute.Callback._op_syncPubMsg.end(self, _r)

        def alarm(self, uuidSession, points, _ctx=None):
            return _M_IotRoute.Callback._op_alarm.invoke(self, ((uuidSession, points), _ctx))

        def begin_alarm(self, uuidSession, points, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_IotRoute.Callback._op_alarm.begin(self, ((uuidSession, points), _response, _ex, _sent, _ctx))

        def end_alarm(self, _r):
            return _M_IotRoute.Callback._op_alarm.end(self, _r)

        def login(self, userName, psw, uuid, _ctx=None):
            return _M_IotRoute.Callback._op_login.invoke(self, ((userName, psw, uuid), _ctx))

        def begin_login(self, userName, psw, uuid, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_IotRoute.Callback._op_login.begin(self, ((userName, psw, uuid), _response, _ex, _sent, _ctx))

        def end_login(self, _r):
            return _M_IotRoute.Callback._op_login.end(self, _r)

        def logout(self, uuidSession, _ctx=None):
            return _M_IotRoute.Callback._op_logout.invoke(self, ((uuidSession, ), _ctx))

        def begin_logout(self, uuidSession, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_IotRoute.Callback._op_logout.begin(self, ((uuidSession, ), _response, _ex, _sent, _ctx))

        def end_logout(self, _r):
            return _M_IotRoute.Callback._op_logout.end(self, _r)

        def getTableDetail(self, uuidSession, _ctx=None):
            return _M_IotRoute.Callback._op_getTableDetail.invoke(self, ((uuidSession, ), _ctx))

        def begin_getTableDetail(self, uuidSession, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_IotRoute.Callback._op_getTableDetail.begin(self, ((uuidSession, ), _response, _ex, _sent, _ctx))

        def end_getTableDetail(self, _r):
            return _M_IotRoute.Callback._op_getTableDetail.end(self, _r)

        def deleteTable(self, uuidSession, _ctx=None):
            return _M_IotRoute.Callback._op_deleteTable.invoke(self, ((uuidSession, ), _ctx))

        def begin_deleteTable(self, uuidSession, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_IotRoute.Callback._op_deleteTable.begin(self, ((uuidSession, ), _response, _ex, _sent, _ctx))

        def end_deleteTable(self, _r):
            return _M_IotRoute.Callback._op_deleteTable.end(self, _r)

        def updateTable(self, uuidSession, tableJsonData, _ctx=None):
            return _M_IotRoute.Callback._op_updateTable.invoke(self, ((uuidSession, tableJsonData), _ctx))

        def begin_updateTable(self, uuidSession, tableJsonData, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_IotRoute.Callback._op_updateTable.begin(self, ((uuidSession, tableJsonData), _response, _ex, _sent, _ctx))

        def end_updateTable(self, _r):
            return _M_IotRoute.Callback._op_updateTable.end(self, _r)

        def getDeviceData(self, uuidSession, points, _ctx=None):
            return _M_IotRoute.Callback._op_getDeviceData.invoke(self, ((uuidSession, points), _ctx))

        def begin_getDeviceData(self, uuidSession, points, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_IotRoute.Callback._op_getDeviceData.begin(self, ((uuidSession, points), _response, _ex, _sent, _ctx))

        def end_getDeviceData(self, _r):
            return _M_IotRoute.Callback._op_getDeviceData.end(self, _r)

        def getPlatformData(self, uuidSession, points, _ctx=None):
            return _M_IotRoute.Callback._op_getPlatformData.invoke(self, ((uuidSession, points), _ctx))

        def begin_getPlatformData(self, uuidSession, points, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_IotRoute.Callback._op_getPlatformData.begin(self, ((uuidSession, points), _response, _ex, _sent, _ctx))

        def end_getPlatformData(self, _r):
            return _M_IotRoute.Callback._op_getPlatformData.end(self, _r)

        def devOnline(self, uuidSession, devId, _ctx=None):
            return _M_IotRoute.Callback._op_devOnline.invoke(self, ((uuidSession, devId), _ctx))

        def begin_devOnline(self, uuidSession, devId, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_IotRoute.Callback._op_devOnline.begin(self, ((uuidSession, devId), _response, _ex, _sent, _ctx))

        def end_devOnline(self, _r):
            return _M_IotRoute.Callback._op_devOnline.end(self, _r)

        def devOffline(self, uuidSession, devId, _ctx=None):
            return _M_IotRoute.Callback._op_devOffline.invoke(self, ((uuidSession, devId), _ctx))

        def begin_devOffline(self, uuidSession, devId, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_IotRoute.Callback._op_devOffline.begin(self, ((uuidSession, devId), _response, _ex, _sent, _ctx))

        def end_devOffline(self, _r):
            return _M_IotRoute.Callback._op_devOffline.end(self, _r)

        def heartbeat(self, _ctx=None):
            return _M_IotRoute.Callback._op_heartbeat.invoke(self, ((), _ctx))

        def begin_heartbeat(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_IotRoute.Callback._op_heartbeat.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_heartbeat(self, _r):
            return _M_IotRoute.Callback._op_heartbeat.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_IotRoute.CallbackPrx.ice_checkedCast(proxy, '::IotRoute::Callback', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_IotRoute.CallbackPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::IotRoute::Callback'
        ice_staticId = staticmethod(ice_staticId)

    _M_IotRoute._t_CallbackPrx = IcePy.defineProxy('::IotRoute::Callback', CallbackPrx)

    _M_IotRoute._t_Callback = IcePy.defineClass('::IotRoute::Callback', Callback, -1, (), True, False, None, (), ())
    Callback._ice_type = _M_IotRoute._t_Callback

    Callback._op_sendMsg = IcePy.Operation('sendMsg', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), ((), IcePy._t_string, False, 0), ())
    Callback._op_addClient = IcePy.Operation('addClient', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), _M_Ice._t_Identity, False, 0)), (), ((), IcePy._t_string, False, 0), ())
    Callback._op_subMsg = IcePy.Operation('subMsg', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), ((), IcePy._t_string, False, 0), ())
    Callback._op_syncPubMsg = IcePy.Operation('syncPubMsg', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), ((), IcePy._t_string, False, 0), ())
    Callback._op_alarm = IcePy.Operation('alarm', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), ((), IcePy._t_string, False, 0), ())
    Callback._op_login = IcePy.Operation('login', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), ((), IcePy._t_string, False, 0), ())
    Callback._op_logout = IcePy.Operation('logout', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_string, False, 0), ())
    Callback._op_getTableDetail = IcePy.Operation('getTableDetail', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_string, False, 0), ())
    Callback._op_deleteTable = IcePy.Operation('deleteTable', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_string, False, 0), ())
    Callback._op_updateTable = IcePy.Operation('updateTable', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), ((), IcePy._t_string, False, 0), ())
    Callback._op_getDeviceData = IcePy.Operation('getDeviceData', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), ((), IcePy._t_string, False, 0), ())
    Callback._op_getPlatformData = IcePy.Operation('getPlatformData', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), ((), IcePy._t_string, False, 0), ())
    Callback._op_devOnline = IcePy.Operation('devOnline', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), ((), IcePy._t_string, False, 0), ())
    Callback._op_devOffline = IcePy.Operation('devOffline', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), ((), IcePy._t_string, False, 0), ())
    Callback._op_heartbeat = IcePy.Operation('heartbeat', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_string, False, 0), ())

    _M_IotRoute.Callback = Callback
    #del Callback

    _M_IotRoute.CallbackPrx = CallbackPrx
    #del CallbackPrx

# End of module IotRoute
